transfer of state of an resource

client server constraint
	client and servers are completely seperated where a machine can be either a client or a server not both

statelessness
	server cannot store state of client everything it needs is in the request client can maintain state
cache 
	whether response should be chached or not must be indicated in the response by the server
uniform user interface
	all devices must communicate with server in same way
layered
	architecture is layered
code on demand
	server can send exceuteable optional code

api is how different devices communicate its a defintion  of how these devices must communicate

web api is how diffenrent applications communicate one application can user services provided by other applications

web server processes requests from the client and prepares a response

web is connection of networks

network is connection of computers

level -0 a single uri and uses post for evrything
level -1 uri for each resource but uses post for everything
level -2 uri for each resource and uses multiple methods based on request such as get,post etc
level -3 uri for each resource and multiple methods of request and huses hateos

hateos embeds links in responses that points to additional resources that might be useful in better understanding the response

use verbs instead of nouns and specify the operation using the http methods

get-for getting the resource post - for adding the reource put -for updating delete - for deleting  patch-to update a part of resource

controllers
	classes that will contain methods and based on the type of request a particular method of the controller will be invoked




dependencies 
<dependencies>
		<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-web</artifactId>
    <version>2.7.3</version>
</dependency>

<!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-test -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-test</artifactId>
    <version>2.7.3</version>
    <scope>test</scope>
</dependency>

</dependencies>



demo app
package com.prajwal.demo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class DemoApplication {

	public static void main(String[] args) {
		SpringApplication.run(DemoApplication.class, args);
	}

}



@RequestBody
	to get parameters from body of the request

@GetMapping
@PostMapping
@DeleteMapping


while posting the name of the variable in pojo class and the key of the value in jason must be same


@PathVariable to attach a path variable to a handler argument

@RestController
	annotate the controller class with this annotation


returning html from action of a controller
	return new ModelAndView("viewnamewithoutextension");


try to put springbootapplication annotated class not in the default package put it in your created package as it might cause error putting in default package


jdbc driver class name
	com.mysql.cj.jdbc.Driver



dependencies for spring jdbc

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
            <version>2.7.3</version>
        </dependency>




        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.30</version>
        </dependency>


//lambok dependency for auto getters setters and to string generation

  <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
            <scope>provided</scope>
        </dependency>


application.properties
spring.datasource.driver-class-name=com.mysql.jdbc.Driver 
spring.datasource.url=jdbc:mysql://localhost:3306/springtraining 
spring.datasource.username=* 
spring.datasource.password=

while using xml based config in maven project put xml file under resources


jdbcTemplate alloows us to excute queries on the database

DriverManagerDataSource takes 


in result set the indexing begins from 1 not zero


@AutoConfigure the jdbc template give property values in application.properties file and place it in resources


PreparedStatement is an interface create a lambda (preparedStatement)->{preparedStatement.setString(index,value);}    can do this for different data types other than string


S4lj logging error can be solved by adding spring starter web test dependency


for sending xml data send in the form of
<item>
<variable-name>valuewithoutquotes</variable-name>
</item>



ResponseEntity
	to send http respons or the data
	ResponseEntity.status(HttpStatus.statusConstant).build()        //to create a response entity object with status
	ResoponseEntity.of(Optional.of(data))				//to return some datav with 200 status code


@Profile annotation
u could have multiple application.properties files with naming convention of application-somename.properties

in the main application.properties set spring.profiles.active=somename

and on top of any bean specify @Profile("somename") now this bean will be only created when in application.properties the above property is set to the somename specified in @Profile


@PostConstruct
is normally used on a method to be auto called after all the beans are created

microservices
if u have a larger application breaking down into different smaller applications based on their functionality and connecting these smaller applications to talk to each other and work as a larger app

connecting to apis
apis just handle requests and send reponses they sort of provide an functionality that u can use through sending requests to these and handle the responses that they send 
