ORM
	mapping of objects onto the database

Configuration
	requires a configuration file hibernate.config.xml
	requires classes that need to be mapped

ServiceRegistry 
	built using the configuration object and service registry builder

hibernate.config.xml
	u need to specify driver classname ,url,username,password adn also dialect to indicate which rdbms language u are using 
	<hibernate-configuration>
		<session-factory>	
			<property name="hibernate.connection.driver_class">driverclassname</property>
			<property name="hibernate.connection.url">url</property>
			<property name="hibernate.connection.username">username</property>
			<property name="hibernate.connection.password">password</property>
			<property name="hibernate.connection.dialect">dialect</property>
			<property name="hbm2ddl.auto">create</property>  //create a new table every time update will create only if not present
		</session-factory>
	</hibernate-configuration>

SessionFactory
	created using configuration and using the service registry object

Session
	created using session factory

Transaction
	required while performing operations that might alter the contents of the table

@Entity
	to annotate a class to be mapped to a table

@Id
	to annotate a variable to be used as primary key for the table

@Table
	naming a table using this

@Column
	change column properties

@Transient
	data that will not be stored in db

<property name="hibernate.show_sql">true</property>			//to show sql query being used internally in the running terminal


@Embedded
	annotate a class to make its fields as embeddable in another class


@OneToOne
	creates a foreign key in declared table

@ManyToOne
	creates a foreign key in declared table
@OneToMany(mappedBy="variablename")//incase extra table is created for mapping u can stop that by specifying in this the name of the variable of the entity in which the relation would be mapped
	creates a new table on behalf of the table in which its declared
@ManyToMany
	creates table for each table in which it is declared
creation of multiple tables can be avoided by using the mappedBy property


dependencies
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>4.1.6.Final</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.30</version>
        </dependency>


cache
	first level cache
		for single session each session has its own first level cache
	second level cache
		any session can access this cache all sessions combined have single second level cache
		for 2nd level cache u will require an external cache use ehcache and also add hibernate ehcache dependency make sure the version of the hibernate and ehcache are matching
		
		in the class or entity which has to be cached annotate with @cacheable  and @cache(usage=Cachingstrategy)