create entity manager factory using the persistance class

using entity manager factory create a entity manager

then using entity manager perform database operations

annotate the class as entity and also annotate the id

use javax class


dependencies needed
	<dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>5.6.10.Final</version>
        </dependency>
	 <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.30</version>
        </dependency>


persistance xml file   persistence.xml
<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<persistence xmlns="http://xmlns.jcp.org/xml/ns/persistence"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence
          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_2.xsd"
             version="2.2">

<persistence-unit name="default">
    <properties>
        <property name="javax.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver" />
        <property name="javax.persistence.jdbc.url"
                  value="jdbc:mysql://localhost:3306/forjpa" />
        <property name="javax.persistence.jdbc.user" value="root" />
        <property name="javax.persistence.jdbc.password"
                  value="root" />

    </properties>
</persistence-unit>
</persistence>


place it under resources/META-INF folder

create a db and also a table in database


dependencies for jpa
<dependencies>
        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
            <version>2.7.2</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>2.7.3</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.30</version>
        </dependency>

        <dependency>
            <groupId>javax.xml.bind</groupId>
            <artifactId>jaxb-api</artifactId>
            <version>2.3.0</version>
        </dependency>


        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.24</version>
            <scope>provided</scope>
        </dependency>


use mysql5dialect


application.properties file
spring.datasource.url=jdbc:mysql://localhost:3306/forjpa
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.database-platform = org.hibernate.dialect.MySQL5Dialect
spring.jpa.generate-ddl=true
spring.jpa.hibernate.ddl-auto = update




@Query can be used for mentioning ur own queries for methods in jpaRepository

@Modifying can beb used for creating sql stateemnts which modify the table such as delete has to be used in combination with @Query and also annotate with @Transactional
@Transactional
@Modying
@Query(value="mention query here",nativeQuery=true)


    @Transactional
    @Modifying
    @Query(value = "delete from employee e where e.city=?1",nativeQuery = true)
    void deleteByCity(String city);



@NamedNativeQuery(name = "Employee.findByNameandCity",query ="select * from employee  where name=?1 and city=?2",resultClass = Employee.class)
useful for mentioning queries along with the entity and can create a method with the same name in jparepositiory which can be directly called


@OneToOne
can be both unidirectinal and bidirectional 
in unidirectional u create the foreign key which references the primary key of the other table
in bidirectional u apply the relation ship in both tables
u can also use mapped by if u have created variables for foreign key in both classes like bidirectional


//for data format exception
while using bidirectional relationships use
@JsonBackReference on the variable which will not map
@JsonManagedReference on variable which will map
u also need to mention the mapped by
and @JsonIgnore on variable which is used for mapping